<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WiimoteLib</name>
    </assembly>
    <members>
        <member name="T:WiimoteLib.WiimoteCollection">
            <summary>
            Used to manage multiple Wiimotes
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteCollection.FindAllWiimotes">
            <summary>
            Finds all Wiimotes connected to the system and adds them to the collection
            </summary>
        </member>
        <member name="T:WiimoteLib.WiimoteExtensionChangedEventArgs">
            <summary>
            Argument sent through the WiimoteExtensionChangedEvent
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteExtensionChangedEventArgs.ExtensionType">
            <summary>
            The extenstion type inserted or removed
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteExtensionChangedEventArgs.Inserted">
            <summary>
            Whether the extension was inserted or removed
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteExtensionChangedEventArgs.#ctor(WiimoteLib.ExtensionNumber,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="type">The extension type inserted or removed</param>
            <param name="inserted">Whether the extension was inserted or removed</param>
        </member>
        <member name="T:WiimoteLib.WiimoteChangedEventArgs">
            <summary>
            Argument sent through the WiimoteChangedEvent
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteChangedEventArgs.WiimoteState">
            <summary>
            The current state of the Wiimote and extension controllers
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteChangedEventArgs.#ctor(WiimoteLib.WiimoteState)">
            <summary>
            Constructor
            </summary>
            <param name="ws">Wiimote state</param>
        </member>
        <member name="T:WiimoteLib.PointF">
            <summary>
            Point structure for floating point 2D positions (X, Y)
            </summary>
        </member>
        <member name="F:WiimoteLib.PointF.X">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.PointF.Y">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="M:WiimoteLib.PointF.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point</returns>
        </member>
        <member name="T:WiimoteLib.Point">
            <summary>
            Point structure for int 2D positions (X, Y)
            </summary>
        </member>
        <member name="F:WiimoteLib.Point.X">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.Point.Y">
            <summary>
            X, Y coordinates of this point
            </summary>
        </member>
        <member name="M:WiimoteLib.Point.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point.</returns>
        </member>
        <member name="T:WiimoteLib.Point3F">
            <summary>
            Point structure for floating point 3D positions (X, Y, Z)
            </summary>
        </member>
        <member name="F:WiimoteLib.Point3F.X">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.Point3F.Y">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.Point3F.Z">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="M:WiimoteLib.Point3F.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point</returns>
        </member>
        <member name="T:WiimoteLib.Point3">
            <summary>
            Point structure for int 3D positions (X, Y, Z)
            </summary>
        </member>
        <member name="F:WiimoteLib.Point3.X">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.Point3.Y">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.Point3.Z">
            <summary>
            X, Y, Z coordinates of this point
            </summary>
        </member>
        <member name="M:WiimoteLib.Point3.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point.</returns>
        </member>
        <member name="T:WiimoteLib.Euler">
            <summary>
            Euler structure for floating point 3D positions (roll, pitch, yaw)
            </summary>
        </member>
        <member name="F:WiimoteLib.Euler.Roll">
            <summary>
            roll, pitch, yaw coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.Euler.Pitch">
            <summary>
            roll, pitch, yaw coordinates of this point
            </summary>
        </member>
        <member name="F:WiimoteLib.Euler.Yaw">
            <summary>
            roll, pitch, yaw coordinates of this point
            </summary>
        </member>
        <member name="M:WiimoteLib.Euler.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point</returns>
        </member>
        <member name="T:WiimoteLib.WiimoteState">
            <summary>
            Current overall state of the Wiimote and all attachments
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.Position">
            <summary>
            Current Position - Euler Angles
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.AccelCalibrationInfo">
            <summary>
            Current calibration information
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.AccelState">
            <summary>
            Current state of accelerometers
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.ButtonState">
            <summary>
            Current state of buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.IRState">
            <summary>
            Current state of IR sensors
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.BatteryRaw">
            <summary>
            Raw byte value of current battery level
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.Battery">
            <summary>
            Calculated current battery level
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.Rumble">
            <summary>
            Current state of rumble
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.Extension">
            <summary>
            Is an extension controller inserted?
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.NunchukState">
            <summary>
            Current state of Nunchuk extension
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.ClassicControllerState">
            <summary>
            Current state of Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.GuitarState">
            <summary>
            Current state of Guitar extension
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.DrumsState">
            <summary>
            Current state of Drums extension
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.BalanceBoardState">
            <summary>
            Current state of the Wii Fit Balance Board
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.TaikoDrumState">
            <summary>
            Current state of the Taiko TaTaCon drum controller
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.MotionPlusState">
            <summary>
            Current state of the MotionPlus controller
            </summary>
        </member>
        <member name="F:WiimoteLib.WiimoteState.LEDState">
            <summary>
            Current state of LEDs
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteState.#ctor">
            <summary>
            Constructor for WiimoteState class
            </summary>
        </member>
        <member name="T:WiimoteLib.LEDState">
            <summary>
            Current state of LEDs
            </summary>
        </member>
        <member name="F:WiimoteLib.LEDState.LED1">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.LEDState.LED2">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.LEDState.LED3">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.LEDState.LED4">
            <summary>
            LED on the Wiimote
            </summary>
        </member>
        <member name="T:WiimoteLib.NunchukCalibrationInfo">
            <summary>
            Calibration information stored on the Nunchuk
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukCalibrationInfo.AccelCalibration">
            <summary>
            Accelerometer calibration data
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukCalibrationInfo.MinX">
            <summary>
            Joystick X-axis calibration
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukCalibrationInfo.MidX">
            <summary>
            Joystick X-axis calibration
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukCalibrationInfo.MaxX">
            <summary>
            Joystick X-axis calibration
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukCalibrationInfo.MinY">
            <summary>
            Joystick Y-axis calibration
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukCalibrationInfo.MidY">
            <summary>
            Joystick Y-axis calibration
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukCalibrationInfo.MaxY">
            <summary>
            Joystick Y-axis calibration
            </summary>
        </member>
        <member name="T:WiimoteLib.ClassicControllerCalibrationInfo">
            <summary>
            Calibration information stored on the Classic Controller
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MinXL">
            <summary>
            Left joystick X-axis 
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MidXL">
            <summary>
            Left joystick X-axis 
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MaxXL">
            <summary>
            Left joystick X-axis 
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MinYL">
            <summary>
            Left joystick Y-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MidYL">
            <summary>
            Left joystick Y-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MaxYL">
            <summary>
            Left joystick Y-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MinXR">
            <summary>
            Right joystick X-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MidXR">
            <summary>
            Right joystick X-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MaxXR">
            <summary>
            Right joystick X-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MinYR">
            <summary>
            Right joystick Y-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MidYR">
            <summary>
            Right joystick Y-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MaxYR">
            <summary>
            Right joystick Y-axis
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MinTriggerL">
            <summary>
            Left analog trigger
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MaxTriggerL">
            <summary>
            Left analog trigger
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MinTriggerR">
            <summary>
            Right analog trigger
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerCalibrationInfo.MaxTriggerR">
            <summary>
            Right analog trigger
            </summary>
        </member>
        <member name="T:WiimoteLib.NunchukState">
            <summary>
            Current state of the Nunchuk extension
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukState.CalibrationInfo">
            <summary>
            Calibration data for Nunchuk extension
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukState.AccelState">
            <summary>
            State of accelerometers
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukState.RawJoystick">
            <summary>
            Raw joystick position before normalization.  Values range between 0 and 255.
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukState.Joystick">
            <summary>
            Normalized joystick position.  Values range between -0.5 and 0.5
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukState.C">
            <summary>
            Digital button on Nunchuk extension
            </summary>
        </member>
        <member name="F:WiimoteLib.NunchukState.Z">
            <summary>
            Digital button on Nunchuk extension
            </summary>
        </member>
        <member name="T:WiimoteLib.ClassicControllerButtonState">
            <summary>
            Curernt button state of the Classic Controller
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.A">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.B">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Plus">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Home">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Minus">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Up">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Down">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Left">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Right">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.X">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.Y">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.ZL">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.ZR">
            <summary>
            Digital button on the Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.TriggerL">
            <summary>
            Analog trigger - false if released, true for any pressure applied
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerButtonState.TriggerR">
            <summary>
            Analog trigger - false if released, true for any pressure applied
            </summary>
        </member>
        <member name="T:WiimoteLib.ClassicControllerState">
            <summary>
            Current state of the Classic Controller
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.CalibrationInfo">
            <summary>
            Calibration data for Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.ButtonState">
            <summary>
            Current button state
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.RawJoystickL">
            <summary>
            Raw value of left joystick.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.RawJoystickR">
            <summary>
            Raw value of right joystick.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.JoystickL">
            <summary>
            Normalized value of left joystick.  Values range between -0.5 - 0.5
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.JoystickR">
            <summary>
            Normalized value of right joystick.  Values range between -0.5 - 0.5
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.RawTriggerL">
            <summary>
            Raw value of analog trigger.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.RawTriggerR">
            <summary>
            Raw value of analog trigger.  Values range between 0 - 255.
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.TriggerL">
            <summary>
            Normalized value of analog trigger.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="F:WiimoteLib.ClassicControllerState.TriggerR">
            <summary>
            Normalized value of analog trigger.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="T:WiimoteLib.GuitarState">
            <summary>
            Current state of the Guitar controller
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.GuitarType">
            <summary>
            Guitar type
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.ButtonState">
            <summary>
            Current button state of the Guitar
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.FretButtonState">
            <summary>
            Current fret button state of the Guitar
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.TouchbarState">
            <summary>
            Current touchbar state of the Guitar
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.RawJoystick">
            <summary>
            Raw joystick position.  Values range between 0 - 63.
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.Joystick">
            <summary>
            Normalized value of joystick position.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.RawWhammyBar">
            <summary>
            Raw whammy bar position.  Values range between 0 - 10.
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarState.WhammyBar">
            <summary>
            Normalized value of whammy bar position.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="T:WiimoteLib.GuitarFretButtonState">
            <summary>
            Current fret button state of the Guitar controller
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarFretButtonState.Green">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarFretButtonState.Red">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarFretButtonState.Yellow">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarFretButtonState.Blue">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarFretButtonState.Orange">
            <summary>
            Fret buttons
            </summary>
        </member>
        <member name="T:WiimoteLib.GuitarButtonState">
            <summary>
            Current button state of the Guitar controller
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarButtonState.StrumUp">
            <summary>
            Strum bar
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarButtonState.StrumDown">
            <summary>
            Strum bar
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarButtonState.Minus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarButtonState.Plus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="T:WiimoteLib.DrumsState">
            <summary>
            Current state of the Drums controller
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Red">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Green">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Blue">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Orange">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Yellow">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Pedal">
            <summary>
            Drum pads
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.RedVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.GreenVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.BlueVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.OrangeVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.YellowVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.PedalVelocity">
            <summary>
            Speed at which the pad is hit.  Values range from 0 (very hard) to 6 (very soft)
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Plus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Minus">
            <summary>
            Other buttons
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.RawJoystick">
            <summary>
            Raw value of analong joystick.  Values range from 0 - 15
            </summary>
        </member>
        <member name="F:WiimoteLib.DrumsState.Joystick">
            <summary>
            Normalized value of analog joystick.  Values range from 0.0 - 1.0
            </summary>
        </member>
        <member name="T:WiimoteLib.BalanceBoardState">
            <summary>
            Current state of the Wii Fit Balance Board controller
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardState.CalibrationInfo">
            <summary>
            Calibration information for the Balance Board
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardState.SensorValuesRaw">
            <summary>
            Raw values of each sensor
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardState.SensorValuesKg">
            <summary>
            Kilograms per sensor
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardState.SensorValuesLb">
            <summary>
            Pounds per sensor
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardState.WeightKg">
            <summary>
            Total kilograms on the Balance Board
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardState.WeightLb">
            <summary>
            Total pounds on the Balance Board
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardState.CenterOfGravity">
            <summary>
            Center of gravity of Balance Board user
            </summary>
        </member>
        <member name="T:WiimoteLib.TaikoDrumState">
            <summary>
            Current state of the Taiko Drum (TaTaCon) controller
            </summary>
        </member>
        <member name="F:WiimoteLib.TaikoDrumState.InnerLeft">
            <summary>
            Drum hit location
            </summary>
        </member>
        <member name="F:WiimoteLib.TaikoDrumState.InnerRight">
            <summary>
            Drum hit location
            </summary>
        </member>
        <member name="F:WiimoteLib.TaikoDrumState.OuterLeft">
            <summary>
            Drum hit location
            </summary>
        </member>
        <member name="F:WiimoteLib.TaikoDrumState.OuterRight">
            <summary>
            Drum hit location
            </summary>
        </member>
        <member name="T:WiimoteLib.MontionPlusCalibrationInfo">
            <summary>
            Calibration information stored on the Montion Plus
            </summary>
        </member>
        <member name="F:WiimoteLib.MontionPlusCalibrationInfo.GyroCalibration">
            <summary>
            Gyros calibration data
            </summary>
        </member>
        <member name="F:WiimoteLib.MontionPlusCalibrationInfo.GyroFastCalibration">
            <summary>
            Gyros calibration data
            </summary>
        </member>
        <member name="T:WiimoteLib.GyroCalibrationInfo">
            <summary>
            Gyros calibration information
            </summary>
        </member>
        <member name="F:WiimoteLib.GyroCalibrationInfo.X0">
            <summary>
            Offset of gyros
            </summary>
        </member>
        <member name="F:WiimoteLib.GyroCalibrationInfo.Y0">
            <summary>
            Offset of gyros
            </summary>
        </member>
        <member name="F:WiimoteLib.GyroCalibrationInfo.Z0">
            <summary>
            Offset of gyros
            </summary>
        </member>
        <member name="F:WiimoteLib.GyroCalibrationInfo.XG">
            <summary>
            Gain of gyros
            </summary>
        </member>
        <member name="F:WiimoteLib.GyroCalibrationInfo.YG">
            <summary>
            Gain of gyros
            </summary>
        </member>
        <member name="F:WiimoteLib.GyroCalibrationInfo.ZG">
            <summary>
            Gain of gyros
            </summary>
        </member>
        <member name="T:WiimoteLib.MotionPlusState">
            <summary>
            Current state of the MotionPlus controller
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.CalibrationInfo">
            <summary>
            Calibration data for MontionPlus
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.FilteredValues">
            <summary>
            GYro values after filter
            <remarks>Values range between 0 - ?</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.RawValues">
            <summary>
            Raw speed data
            <remarks>Values range between 0 - 16384</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.Values">
            <summary>
            Normalized speed data
            <remarks>Values range between 0 - ?</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.Values2">
            <summary>
            Normalized speed data
            <remarks>Values range between 0 - ?</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.YawFast">
            <summary>
            Yaw/Pitch/Roll rotating "quickly" (no definition for "quickly" yet...)
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.PitchFast">
            <summary>
            Yaw/Pitch/Roll rotating "quickly" (no definition for "quickly" yet...)
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.RollFast">
            <summary>
            Yaw/Pitch/Roll rotating "quickly" (no definition for "quickly" yet...)
            </summary>
        </member>
        <member name="F:WiimoteLib.MotionPlusState.Angles">
            <summary>
             Pitch and Roll and Yaw
            </summary>
        </member>
        <member name="T:WiimoteLib.BalanceBoardCalibrationInfo">
            <summary>
            Calibration information
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardCalibrationInfo.Kg0">
            <summary>
            Calibration information at 0kg
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardCalibrationInfo.Kg17">
            <summary>
            Calibration information at 17kg
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardCalibrationInfo.Kg34">
            <summary>
            Calibration information at 34kg
            </summary>
        </member>
        <member name="T:WiimoteLib.BalanceBoardSensors">
            <summary>
            The 4 sensors on the Balance Board (short values)
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensors.TopRight">
            <summary>
            Sensor at top right
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensors.TopLeft">
            <summary>
            Sensor at top left
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensors.BottomRight">
            <summary>
            Sensor at bottom right
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensors.BottomLeft">
            <summary>
            Sensor at bottom left
            </summary>
        </member>
        <member name="T:WiimoteLib.BalanceBoardSensorsF">
            <summary>
            The 4 sensors on the Balance Board (float values)
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensorsF.TopRight">
            <summary>
            Sensor at top right
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensorsF.TopLeft">
            <summary>
            Sensor at top left
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensorsF.BottomRight">
            <summary>
            Sensor at bottom right
            </summary>
        </member>
        <member name="F:WiimoteLib.BalanceBoardSensorsF.BottomLeft">
            <summary>
            Sensor at bottom left
            </summary>
        </member>
        <member name="T:WiimoteLib.IRSensor">
            <summary>
            Current state of a single IR sensor
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensor.RawPosition">
            <summary>
            Raw values of individual sensor.  Values range between 0 - 1023 on the X axis and 0 - 767 on the Y axis.
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensor.Position">
            <summary>
            Normalized values of the sensor position.  Values range between 0.0 - 1.0.
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensor.Size">
            <summary>
            Size of IR Sensor.  Values range from 0 - 15
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensor.Found">
            <summary>
            IR sensor seen
            </summary>
        </member>
        <member name="M:WiimoteLib.IRSensor.ToString">
            <summary>
            Convert to human-readable string
            </summary>
            <returns>A string that represents the point.</returns>
        </member>
        <member name="T:WiimoteLib.IRState">
            <summary>
            Current state of the IR camera
            </summary>
        </member>
        <member name="F:WiimoteLib.IRState.Mode">
            <summary>
            Current mode of IR sensor data
            </summary>
        </member>
        <member name="F:WiimoteLib.IRState.IRSensors">
            <summary>
            Current state of IR sensors
            </summary>
        </member>
        <member name="F:WiimoteLib.IRState.RawMidpoint">
            <summary>
            Raw midpoint of IR sensors 1 and 2 only.  Values range between 0 - 1023, 0 - 767
            </summary>
        </member>
        <member name="F:WiimoteLib.IRState.Midpoint">
            <summary>
            Normalized midpoint of IR sensors 1 and 2 only.  Values range between 0.0 - 1.0
            </summary>
        </member>
        <member name="T:WiimoteLib.AccelState">
            <summary>
            Current state of the accelerometers
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelState.RawValues6b">
            <summary>
            Raw accelerometer data.
            <remarks>Values range between 0 - 255</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelState.RawValues8b">
            <summary>
            Raw accelerometer data.
            <remarks>Values range between 0 - 1024</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelState.Values">
            <summary>
            Normalized accelerometer data.
            <remarks>Values range between 0 - 3g, but values > 3g and &lt; -3g are inaccurate.(g=9.8m/s^2)</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelState.Values2">
            <summary>
            Normalized accelerometer data.
            <remarks>Values range between 0 - ?, but values > 3 and &lt; -3 are inaccurate.</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelState.Orientation">
            <summary>
            Orientation Data
            <remarks>Values range between 0 - ?</remarks>
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelState.Angles">
            <summary>
             Pitch and Roll angles (Yaw can't be measured as no change in gravity)
            </summary>
        </member>
        <member name="T:WiimoteLib.AccelCalibrationInfo">
            <summary>
            Accelerometer calibration information
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelCalibrationInfo.X0">
            <summary>
            Zero point of accelerometer
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelCalibrationInfo.Y0">
            <summary>
            Zero point of accelerometer
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelCalibrationInfo.Z0">
            <summary>
            Zero point of accelerometer
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelCalibrationInfo.XG">
            <summary>
            Gravity at rest of accelerometer
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelCalibrationInfo.YG">
            <summary>
            Gravity at rest of accelerometer
            </summary>
        </member>
        <member name="F:WiimoteLib.AccelCalibrationInfo.ZG">
            <summary>
            Gravity at rest of accelerometer
            </summary>
        </member>
        <member name="T:WiimoteLib.ButtonState">
            <summary>
            Current button state
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.A">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.B">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Plus">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Home">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Minus">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.One">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Two">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Up">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Down">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Left">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ButtonState.Right">
            <summary>
            Digital button on the Wiimote
            </summary>
        </member>
        <member name="T:WiimoteLib.ExtensionType">
            <summary>
            
            </summary>
        </member>
        <member name="T:WiimoteLib.PassThruMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:WiimoteLib.ExtensionNumber">
            <summary>
            The extension number of the currently plugged into the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.None">
            <summary>
            No extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.Nunchuk">
            <summary>
            Nunchuk extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.ClassicController">
            <summary>
            Classic Controller extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.Guitar">
            <summary>
            Guitar controller from Guitar Hero 3/WorldTour
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.Drums">
            <summary>
            Drum controller from Guitar Hero: World Tour
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.BalanceBoard">
            <summary>
            Wii Fit Balance Board controller
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.TaikoDrum">
            <summary>
            Taiko "TaTaCon" drum controller
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.MotionPlus">
            <summary>
            Wii MotionPlus extension
            </summary>
        </member>
        <member name="F:WiimoteLib.ExtensionNumber.ParitallyInserted">
            <summary>
            Partially inserted extension.  This is an error condition.
            </summary>
        </member>
        <member name="T:WiimoteLib.IRMode">
            <summary>
            The mode of data reported for the IR sensor
            </summary>
        </member>
        <member name="F:WiimoteLib.IRMode.Off">
            <summary>
            IR sensor off
            </summary>
        </member>
        <member name="F:WiimoteLib.IRMode.Basic">
            <summary>
            Basic mode
            </summary>
        </member>
        <member name="F:WiimoteLib.IRMode.Extended">
            <summary>
            Extended mode
            </summary>
        </member>
        <member name="F:WiimoteLib.IRMode.Full">
            <summary>
            Full mode (unsupported)
            </summary>
        </member>
        <member name="T:WiimoteLib.InputReport">
            <summary>
            The report format in which the Wiimote should return data
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.Status">
            <summary>
            Status report
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.ReadData">
            <summary>
            Read data from memory location
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.OutputReportAck">
            <summary>
            Register write complete
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.Buttons">
            <summary>
            Button data only
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.ButtonsAccel">
            <summary>
            Button and accelerometer data
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.IRAccel">
            <summary>
            IR sensor and accelerometer data
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.ButtonsExtension">
            <summary>
            Button and extension controller data
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.ExtensionAccel">
            <summary>
            Extension and accelerometer data
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.IRExtensionAccel">
            <summary>
            IR sensor, extension controller and accelerometer data
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.InterleaveButtonsAccellIR1">
            <summary>
            //0x3e / 0x3f: Interleaved Core Buttons and Accelerometer with 36 IR bytes
            </summary>
        </member>
        <member name="F:WiimoteLib.InputReport.InterleaveButtonsAccellIR2">
            <summary>
            //0x3e / 0x3f: Interleaved Core Buttons and Accelerometer with 36 IR bytes
            </summary>
        </member>
        <member name="T:WiimoteLib.IRSensitivity">
            <summary>
            Sensitivity of the IR camera on the Wiimote
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensitivity.WiiLevel1">
            <summary>
            Equivalent to level 1 on the Wii console
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensitivity.WiiLevel2">
            <summary>
            Equivalent to level 2 on the Wii console
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensitivity.WiiLevel3">
            <summary>
            Equivalent to level 3 on the Wii console (default)
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensitivity.WiiLevel4">
            <summary>
            Equivalent to level 4 on the Wii console
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensitivity.WiiLevel5">
            <summary>
            Equivalent to level 5 on the Wii console
            </summary>
        </member>
        <member name="F:WiimoteLib.IRSensitivity.Maximum">
            <summary>
            Maximum sensitivity
            </summary>
        </member>
        <member name="T:WiimoteLib.GuitarType">
            <summary>
            Type of guitar extension: Guitar Hero 3 or Guitar Hero World Tour
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarType.GuitarHero3">
            <summary>
             Guitar Hero 3 guitar controller
            </summary>
        </member>
        <member name="F:WiimoteLib.GuitarType.GuitarHeroWorldTour">
            <summary>
            Guitar Hero: World Tour guitar controller
            </summary>
        </member>
        <member name="T:WiimoteLib.LastReadStatus">
            <summary>
            Last ReadData status
            </summary>
        </member>
        <member name="F:WiimoteLib.LastReadStatus.Success">
            <summary>
            Successful read
            </summary>
        </member>
        <member name="F:WiimoteLib.LastReadStatus.ReadFromWriteOnlyMemory">
            <summary>
            Attempt to read from write only memory
            </summary>
        </member>
        <member name="T:WiimoteLib.MahonyAHRS">
            <summary>
            MahonyAHRS class. Madgwick's implementation of Mayhony's AHRS algorithm.
            </summary>
            <remarks>
            See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms
            </remarks>
        </member>
        <member name="M:WiimoteLib.MahonyAHRS.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WiimoteLib.MadgwickAHRS"/> class.
            </summary>
            <param name="samplePeriod">
            Sample period.
            </param>
        </member>
        <member name="M:WiimoteLib.MahonyAHRS.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WiimoteLib.MadgwickAHRS"/> class.
            </summary>
            <param name="samplePeriod">
            Sample period.
            </param>
            <param name="kp">
            Algorithm proportional gain.
            </param> 
        </member>
        <member name="M:WiimoteLib.MahonyAHRS.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WiimoteLib.MadgwickAHRS"/> class.
            </summary>
            <param name="samplePeriod">
            Sample period.
            </param>
            <param name="kp">
            Algorithm proportional gain.
            </param>
            <param name="ki">
            Algorithm integral gain.
            </param>
        </member>
        <member name="M:WiimoteLib.MahonyAHRS.Update(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Algorithm AHRS update method. Requires only gyroscope and accelerometer data.
            </summary>
            <param name="gx">
            Gyroscope x axis measurement in radians/s.
            </param>
            <param name="gy">
            Gyroscope y axis measurement in radians/s.
            </param>
            <param name="gz">
            Gyroscope z axis measurement in radians/s.
            </param>
            <param name="ax">
            Accelerometer x axis measurement in any calibrated units.
            </param>
            <param name="ay">
            Accelerometer y axis measurement in any calibrated units.
            </param>
            <param name="az">
            Accelerometer z axis measurement in any calibrated units.
            </param>
            <param name="mx">
            Magnetometer x axis measurement in any calibrated units.
            </param>
            <param name="my">
            Magnetometer y axis measurement in any calibrated units.
            </param>
            <param name="mz">
            Magnetometer z axis measurement in any calibrated units.
            </param>
            <remarks>
            Optimised for minimal arithmetic.
            </remarks> 
        </member>
        <member name="M:WiimoteLib.MahonyAHRS.Update(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Algorithm IMU update method. Requires only gyroscope and accelerometer data.
            </summary>
            <param name="gx">
            Gyroscope x axis measurement in radians/s.
            </param>
            <param name="gy">
            Gyroscope y axis measurement in radians/s.
            </param>
            <param name="gz">
            Gyroscope z axis measurement in radians/s.
            </param>
            <param name="ax">
            Accelerometer x axis measurement in any calibrated units.
            </param>
            <param name="ay">
            Accelerometer y axis measurement in any calibrated units.
            </param>
            <param name="az">
            Accelerometer z axis measurement in any calibrated units.
            </param>
        </member>
        <member name="P:WiimoteLib.MahonyAHRS.SamplePeriod">
            <summary>
            Gets or sets the sample period.
            </summary>
        </member>
        <member name="P:WiimoteLib.MahonyAHRS.Kp">
            <summary>
            Gets or sets the algorithm proportional gain.
            </summary>
        </member>
        <member name="P:WiimoteLib.MahonyAHRS.Ki">
            <summary>
            Gets or sets the algorithm integral gain.
            </summary>
        </member>
        <member name="P:WiimoteLib.MahonyAHRS.Quaternion">
            <summary>
            Gets or sets the Quaternion output.
            </summary>
        </member>
        <member name="P:WiimoteLib.MahonyAHRS.eInt">
            <summary>
            Gets or sets the integral error.
            </summary>
        </member>
        <member name="M:WiimoteLib.MahonyMotionPlusFuser.HandleIMUData(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Handle gyro and accel data by applying calculation if sample period have passed
            </summary>
            <param name="yawDown"></param>
            <param name="pitchLeft"></param>
            <param name="rollLeft"></param>
            <param name="accX"></param>
            <param name="accY"></param>
            <param name="accZ"></param>
        </member>
        <member name="T:WiimoteLib.HIDImports">
            <summary>
            Win32 import information for use with the Wiimote library
            </summary>
        </member>
        <member name="T:WiimoteLib.Wiimote">
            <summary>
            Implementation of Wiimote
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.Connect">
            <summary>
            Connect to the first-found Wiimote
            </summary>
            <exception cref="T:WiimoteLib.WiimoteNotFoundException">Wiimote not found in HID device list</exception>
        </member>
        <member name="M:WiimoteLib.Wiimote.CheckMotionPlusCapabilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.InitializeMotionPlus">
            <summary>
            Initialize the MotionPlus extension
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.DisableMotionPlus">
            <summary>
            
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.Disconnect">
            <summary>
            Disconnect from the controller and stop reading data from it
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.BeginAsyncRead">
            <summary>
            Start reading asynchronously from the controller
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.OnReadData(System.IAsyncResult)">
            <summary>
            Callback when data is ready to be processed
            </summary>
            <param name="ar">State information for the callback</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.ParseInputReport(System.Byte[])">
            <summary>
            Parse a report sent by the Wiimote
            </summary>
            <param name="buff">Data buffer to parse</param>
            <returns>Returns a boolean noting whether an event needs to be posted</returns>
        </member>
        <member name="M:WiimoteLib.Wiimote.InitializeExtension(System.Int64)">
            <summary>
            Handles setting up an extension when plugged in
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.DecryptBuffer(System.Byte[])">
            <summary>
            Decrypts data sent from the extension to the Wiimote
            </summary>
            <param name="buff">Data buffer</param>
            <returns>Byte array containing decoded data</returns>
        </member>
        <member name="M:WiimoteLib.Wiimote.ParseButtons(System.Byte[])">
            <summary>
            Parses a standard button report into the ButtonState struct
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.ParseAccel(WiimoteLib.InputReport,System.Byte[])">
            <summary>
            Parse accelerometer data in Interleave mode
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.ParseAccel(System.Byte[])">
            <summary>
            Parse accelerometer data
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.ParseIR(System.Byte[])">
            <summary>
            Parse IR data from report
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.ParseExtension(System.Byte[],System.Int32)">
            <summary>
            Parse data from an extension controller
            </summary>
            <param name="buff">Data buffer</param>
            <param name="offset">Offset into data buffer</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.ParseReadData(System.Byte[])">
            <summary>
            Parse data returned from a read report
            </summary>
            <param name="buff">Data buffer</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.GetRumbleBit">
            <summary>
            Returns whether rumble is currently enabled.
            </summary>
            <returns>Byte indicating true (0x01) or false (0x00)</returns>
        </member>
        <member name="M:WiimoteLib.Wiimote.ReadWiimoteCalibration">
            <summary>
            Read calibration information stored on Wiimote
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.SetReportType(WiimoteLib.InputReport,System.Boolean)">
            <summary>
            Set Wiimote reporting mode (if using an IR report type, IR sensitivity is set to WiiLevel3)
            </summary>
            <param name="type">Report type</param>
            <param name="continuous">Continuous data</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.SetReportType(WiimoteLib.InputReport,WiimoteLib.IRSensitivity,System.Boolean)">
            <summary>
            Set Wiimote reporting mode
            </summary>
            <param name="type">Report type</param>
            <param name="irSensitivity">IR sensitivity</param>
            <param name="continuous">Continuous data</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.SetLEDs(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the LEDs on the Wiimote
            </summary>
            <param name="led1">LED 1</param>
            <param name="led2">LED 2</param>
            <param name="led3">LED 3</param>
            <param name="led4">LED 4</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.SetLEDs(System.Int32)">
            <summary>
            Set the LEDs on the Wiimote
            </summary>
            <param name="leds">The value to be lit up in base2 on the Wiimote</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.SetRumble(System.Boolean)">
            <summary>
            Toggle rumble
            </summary>
            <param name="on">On or off</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.GetStatus">
            <summary>
            Retrieve the current status of the Wiimote and extensions.  Replaces GetBatteryLevel() since it was poorly named.
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.EnableIR(WiimoteLib.IRMode,WiimoteLib.IRSensitivity)">
            <summary>
            Turn on the IR sensor
            </summary>
            <param name="mode">The data report mode</param>
            <param name="irSensitivity">IR sensitivity</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.DisableIR">
            <summary>
            Disable the IR sensor
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.CreateReport">
            <summary>
            Initialize the report data buffer
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.WriteReport(System.Byte[])">
            <summary>
            Write a report to the Wiimote
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.ReadData(System.Int32,System.Int16)">
            <summary>
            Read data or register from Wiimote
            </summary>
            <param name="address">Address to read</param>
            <param name="size">Length to read</param>
            <returns>Data buffer</returns>
        </member>
        <member name="M:WiimoteLib.Wiimote.WriteData(System.Int32,System.Byte)">
            <summary>
            Write a single byte to the Wiimote
            </summary>
            <param name="address">Address to write</param>
            <param name="data">Byte to write</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.WriteData(System.Int32,System.Byte,System.Byte[])">
            <summary>
            Write a byte array to a specified address
            </summary>
            <param name="address">Address to write</param>
            <param name="size">Length of buffer</param>
            <param name="data">Data buffer</param>
        </member>
        <member name="M:WiimoteLib.Wiimote.Dispose">
            <summary>
            Dispose Wiimote
            </summary>
        </member>
        <member name="M:WiimoteLib.Wiimote.Dispose(System.Boolean)">
            <summary>
            Dispose wiimote
            </summary>
            <param name="disposing">Disposing?</param>
        </member>
        <member name="E:WiimoteLib.Wiimote.WiimoteChanged">
            <summary>
            Event raised when Wiimote state is changed
            </summary>
        </member>
        <member name="E:WiimoteLib.Wiimote.WiimoteExtensionChanged">
            <summary>
            Event raised when an extension is inserted or removed
            </summary>
        </member>
        <member name="P:WiimoteLib.Wiimote.WiimoteState">
            <summary>
            Current Wiimote state
            </summary>
        </member>
        <member name="P:WiimoteLib.Wiimote.ID">
            <summary>
             Unique identifier for this Wiimote (not persisted across application instances)
            </summary>
        </member>
        <member name="P:WiimoteLib.Wiimote.HIDDevicePath">
            <summary>
            HID device path for this Wiimote (valid until Wiimote is disconnected)
            </summary>
        </member>
        <member name="P:WiimoteLib.Wiimote.LastReadStatus">
            <summary>
            Status of last ReadMemory operation
            </summary>
        </member>
        <member name="T:WiimoteLib.WiimoteNotFoundException">
            <summary>
            Thrown when no Wiimotes are found in the HID device list
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteNotFoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:WiimoteLib.WiimoteNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:WiimoteLib.WiimoteNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:WiimoteLib.WiimoteException">
            <summary>
            Represents errors that occur during the execution of the Wiimote library
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WiimoteLib.WiimoteException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:WiimoteLib.WiimoteException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:WiimoteLib.WiimoteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:WiimoteLib.MadgwickAHRS">
            <summary>
            MadgwickAHRS class. Implementation of Madgwick's IMU and AHRS algorithms.
            </summary>
            <remarks>
            See: http://www.x-io.co.uk/node/8#open_source_ahrs_and_imu_algorithms
            </remarks>
        </member>
        <member name="M:WiimoteLib.MadgwickAHRS.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WiimoteLib.MadgwickAHRS"/> class.
            </summary>
            <param name="samplePeriod">
            Sample period.
            </param>
        </member>
        <member name="M:WiimoteLib.MadgwickAHRS.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WiimoteLib.MadgwickAHRS"/> class.
            </summary>
            <param name="samplePeriod">
            Sample period.
            </param>
            <param name="beta">
            Algorithm gain beta.
            </param>
        </member>
        <member name="M:WiimoteLib.MadgwickAHRS.Update(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Algorithm AHRS update method. Requires only gyroscope and accelerometer data.
            </summary>
            <param name="gx">
            Gyroscope x axis measurement in radians/s.
            </param>
            <param name="gy">
            Gyroscope y axis measurement in radians/s.
            </param>
            <param name="gz">
            Gyroscope z axis measurement in radians/s.
            </param>
            <param name="ax">
            Accelerometer x axis measurement in any calibrated units.
            </param>
            <param name="ay">
            Accelerometer y axis measurement in any calibrated units.
            </param>
            <param name="az">
            Accelerometer z axis measurement in any calibrated units.
            </param>
            <param name="mx">
            Magnetometer x axis measurement in any calibrated units.
            </param>
            <param name="my">
            Magnetometer y axis measurement in any calibrated units.
            </param>
            <param name="mz">
            Magnetometer z axis measurement in any calibrated units.
            </param>
            <remarks>
            Optimised for minimal arithmetic.
            Total ±: 160
            Total *: 172
            Total /: 5
            Total sqrt: 5
            </remarks> 
        </member>
        <member name="M:WiimoteLib.MadgwickAHRS.Update(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Algorithm IMU update method. Requires only gyroscope and accelerometer data.
            </summary>
            <param name="gx">
            Gyroscope x axis measurement in radians/s.
            </param>
            <param name="gy">
            Gyroscope y axis measurement in radians/s.
            </param>
            <param name="gz">
            Gyroscope z axis measurement in radians/s.
            </param>
            <param name="ax">
            Accelerometer x axis measurement in any calibrated units.
            </param>
            <param name="ay">
            Accelerometer y axis measurement in any calibrated units.
            </param>
            <param name="az">
            Accelerometer z axis measurement in any calibrated units.
            </param>
            <remarks>
            Optimised for minimal arithmetic.
            Total ±: 45
            Total *: 85
            Total /: 3
            Total sqrt: 3
            </remarks>
        </member>
        <member name="P:WiimoteLib.MadgwickAHRS.SamplePeriod">
            <summary>
            Gets or sets the sample period.
            </summary>
        </member>
        <member name="P:WiimoteLib.MadgwickAHRS.Beta">
            <summary>
            Gets or sets the algorithm gain beta.
            </summary>
        </member>
        <member name="P:WiimoteLib.MadgwickAHRS.Quaternion">
            <summary>
            Gets or sets the Quaternion output.
            </summary>
        </member>
        <member name="M:WiimoteLib.MadgwickMotionPlusFuser.HandleIMUData(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Handle gyro and accel data by applying calculation if sample period have passed
            </summary>
            <param name="yawDown"></param>
            <param name="pitchLeft"></param>
            <param name="rollLeft"></param>
            <param name="accX"></param>
            <param name="accY"></param>
            <param name="accZ"></param>
        </member>
        <member name="T:WiimoteLib.Matrix">
            <summary>
            Matrix Library .Net v2.0 By Anas Abidi, 2004.
            
            The Matrix Library contains Class Matrix which provides many 
            static methods for making various matrix operations on objects
            derived from the class or on arrays defined as double. The 
            '+','-','*' operators are overloaded to work with the objects
            derived from the matrix class.
            </summary>
        </member>
        <member name="M:WiimoteLib.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Matrix object constructor, constructs an empty
            matrix with dimensions: rows = noRows and cols = noCols.
            </summary>
            <param name="noRows"> no. of rows in this matrix </param>
            <param name="noCols"> no. of columns in this matrix</param>
        </member>
        <member name="M:WiimoteLib.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Matrix object constructor, constructs a matrix from an
            already defined array object.
            </summary>
            <param name="Mat">the array the matrix will contain</param>
        </member>
        <member name="M:WiimoteLib.Matrix.OneD_2_TwoD(System.Double[])">
            <summary>
            Returns the 2D form of a 1D array. i.e. array with
            dimension[n] is returned as an array with dimension [n,1]. 
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat"> 
            the array to convert, with dimesion [n] 
            </param>
            <returns> the same array but with [n,1] dimension </returns>
        </member>
        <member name="M:WiimoteLib.Matrix.TwoD_2_OneD(System.Double[0:,0:])">
            <summary>
            Returns the 1D form of a 2D array. i.e. array with
            dimension[n,1] is returned as an array with dimension [n]. 
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">
            the array to convert, with dimesions [n,1] 
            </param>
            <returns>the same array but with [n] dimension</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Identity(System.Int32)">
            <summary>
            Returns an Identity matrix with dimensions [n,n] in the from of an array.
            </summary>
            <param name="n">the no. of rows or no. cols in the matrix</param>
            <returns>An identity Matrix with dimensions [n,n] in the form of an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in the summation</param>
            <param name="Mat2">Second array in the summation</param>
            <returns>Sum of Mat1 and Mat2 as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Add(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First matrix in the summation</param>
            <param name="Mat2">Second matrix in the summation</param>
            <returns>Sum of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Addition(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the summation of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in the summation</param>
            <param name="Mat2">Second Matrix object in the summation</param>
            <returns>Sum of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Subtract(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in the subtraction</param>
            <param name="Mat2">Second array in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Subtract(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First matrix in the subtraction</param>
            <param name="Mat2">Second matrix in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Subtraction(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the difference of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in the subtraction</param>
            <param name="Mat2">Second Matrix object in the subtraction</param>
            <returns>Difference of Mat1 and Mat2 as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">First array in multiplication</param>
            <param name="Mat2">Second array in multiplication</param>
            <returns>Mat1 multiplied by Mat2 as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Multiply(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions OR the cross-product of two vectors.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">
            First matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <param name="Mat2">
            Second matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <returns>Mat1 multiplied by Mat2 as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Multiply(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the multiplication of two matrices with compatible 
            dimensions OR the cross-product of two vectors.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat1">
            First matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <param name="Mat2">
            Second matrix or vector (i.e: dimension [3,1]) object in 
            multiplication
            </param>
            <returns>Mat1 multiplied by Mat2 as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Det(System.Double[0:,0:])">
            <summary>
            Returns the determinant of a matrix with [n,n] dimension.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Array with [n,n] dimension whose determinant is to be found
            </param>
            <returns>Determinant of the array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Det(WiimoteLib.Matrix)">
            <summary>
            Returns the determinant of a matrix with [n,n] dimension.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Matrix object with [n,n] dimension whose determinant is to be found
            </param>
            <returns>Determinant of the Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Inverse(System.Double[0:,0:])">
            <summary>
            Returns the inverse of a matrix with [n,n] dimension 
            and whose determinant is not zero.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Array with [n,n] dimension whose inverse is to be found
            </param>
            <returns>Inverse of the array as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Inverse(WiimoteLib.Matrix)">
            <summary>
            Returns the inverse of a matrix with [n,n] dimension 
            and whose determinant is not zero.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">
            Matrix object with [n,n] dimension whose inverse is to be found
            </param>
            <returns>Inverse of the matrix as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Transpose(System.Double[0:,0:])">
            <summary>
            Returns the transpose of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">Array whose transpose is to be found</param>
            <returns>Transpose of the array as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Transpose(WiimoteLib.Matrix)">
            <summary>
            Returns the transpose of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">Matrix object whose transpose is to be found</param>
            <returns>Transpose of the Matrix object as a Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.SVD(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Evaluates the Singular Value Decomposition of a matrix, 
            returns the  matrices S, U and V. Such that a given
            Matrix = U x S x V'.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'Singular Value Decomposition'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat_">Array whose SVD is to be computed</param>
            <param name="S_">An array where the S matrix is returned</param>
            <param name="U_">An array where the U matrix is returned</param>
            <param name="V_">An array where the V matrix is returned</param>
        </member>
        <member name="M:WiimoteLib.Matrix.SVD(WiimoteLib.Matrix,WiimoteLib.Matrix@,WiimoteLib.Matrix@,WiimoteLib.Matrix@)">
            <summary>
            Evaluates the Singular Value Decomposition of a matrix, 
            returns the  matrices S, U and V. Such that a given
            Matrix = U x S x V'.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'Singular Value Decomposition'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">Matrix object whose SVD is to be computed</param>
            <param name="S">A Matrix object where the S matrix is returned</param>
            <param name="U">A Matrix object where the U matrix is returned</param>
            <param name="V">A Matrix object where the V matrix is returned</param>
        </member>
        <member name="M:WiimoteLib.Matrix.LU(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the LU Decomposition of a matrix. 
            the output is: lower triangular matrix L, upper
            triangular matrix U, and permutation matrix P so that
            P*X = L*U.
            In case of an error the error is raised as an exception.
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat">Array which will be LU Decomposed</param>
            <param name="L">An array where the lower traingular matrix is returned</param>
            <param name="U">An array where the upper traingular matrix is returned</param>
            <param name="P">An array where the permutation matrix is returned</param>
        </member>
        <member name="M:WiimoteLib.Matrix.LU(WiimoteLib.Matrix,WiimoteLib.Matrix@,WiimoteLib.Matrix@,WiimoteLib.Matrix@)">
            <summary>
            Returns the LU Decomposition of a matrix. 
            the output is: lower triangular matrix L, upper
            triangular matrix U, and permutation matrix P so that
            P*X = L*U.
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.  
            </summary>
            <param name="Mat">Matrix object which will be LU Decomposed</param>
            <param name="L">A Matrix object where the lower traingular matrix is returned</param>
            <param name="U">A Matrix object where the upper traingular matrix is returned</param>
            <param name="P">A Matrix object where the permutation matrix is returned</param>
        </member>
        <member name="M:WiimoteLib.Matrix.SolveLinear(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Solves a set of n linear equations A.X = B, and returns
            X, where A is [n,n] and B is [n,1]. 
            In the same manner if you need to compute: inverse(A).B, it is
            better to use this method instead, as it is much faster.  
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="MatA">The array 'A' on the left side of the equations A.X = B</param>
            <param name="MatB">The array 'B' on the right side of the equations A.X = B</param>
            <returns>Array 'X' in the system of equations A.X = B</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.SolveLinear(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Solves a set of n linear equations A.X = B, and returns
            X, where A is [n,n] and B is [n,1]. 
            In the same manner if you need to compute: inverse(A).B, it is
            better to use this method instead, as it is much faster.  
            In case of an error the error is raised as an exception. 
            Note: This method is based on the 'LU Decomposition and Its Applications'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="MatA">Matrix object 'A' on the left side of the equations A.X = B</param>
            <param name="MatB">Matrix object 'B' on the right side of the equations A.X = B</param>
            <returns>Matrix object 'X' in the system of equations A.X = B</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Rank(System.Double[0:,0:])">
            <summary>
            Returns the rank of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">An array whose rank is to be found</param>
            <returns>The rank of the array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Rank(WiimoteLib.Matrix)">
            <summary>
            Returns the rank of a matrix.
            In case of an error the error is raised as an exception. 
            </summary>
            <param name="Mat">a Matrix object whose rank is to be found</param>
            <returns>The rank of the Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.PINV(System.Double[0:,0:])">
            <summary>
            Returns the pseudoinverse of a matrix, such that
            X = PINV(A) produces a matrix 'X' of the same dimensions
            as A' so that A*X*A = A, X*A*X = X.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">An array whose pseudoinverse is to be found</param>
            <returns>The pseudoinverse of the array as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.PINV(WiimoteLib.Matrix)">
            <summary>
            Returns the pseudoinverse of a matrix, such that
            X = PINV(A) produces a matrix 'X' of the same dimensions
            as A' so that A*X*A = A, X*A*X = X.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">a Matrix object whose pseudoinverse is to be found</param>
            <returns>The pseudoinverse of the Matrix object as a Matrix Object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Eigen(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Returns the Eigenvalues and Eigenvectors of a real symmetric
            matrix, which is of dimensions [n,n]. 
            In case of an error the error is raised as an exception.
            Note: This method is based on the 'Eigenvalues and Eigenvectors of a TridiagonalMatrix'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">
            The array whose Eigenvalues and Eigenvectors are to be found
            </param>
            <param name="d">An array where the eigenvalues are returned</param>
            <param name="v">An array where the eigenvectors are returned</param>
        </member>
        <member name="M:WiimoteLib.Matrix.Eigen(WiimoteLib.Matrix,WiimoteLib.Matrix@,WiimoteLib.Matrix@)">
            <summary>
            Returns the Eigenvalues and Eigenvectors of a real symmetric
            matrix, which is of dimensions [n,n]. In case of an error the
            error is raised as an exception.
            Note: This method is based on the 'Eigenvalues and Eigenvectors of a TridiagonalMatrix'
            section of Numerical Recipes in C by William H. Press,
            Saul A. Teukolsky, William T. Vetterling and Brian P. Flannery,
            University of Cambridge Press 1992.
            </summary>
            <param name="Mat">
            The Matrix object whose Eigenvalues and Eigenvectors are to be found
            </param>
            <param name="d">A Matrix object where the eigenvalues are returned</param>
            <param name="v">A Matrix object where the eigenvectors are returned</param>
        </member>
        <member name="M:WiimoteLib.Matrix.ScalarMultiply(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the array</param>
            <param name="Mat">Array which is to be multiplied by a scalar</param>
            <returns>The multiplication of the scalar and the array as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.ScalarMultiply(System.Double,WiimoteLib.Matrix)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the array</param>
            <param name="Mat">Matrix which is to be multiplied by a scalar</param>
            <returns>The multiplication of the scalar and the array as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Multiply(WiimoteLib.Matrix,System.Double)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">Matrix object which is to be multiplied by a scalar</param>
            <param name="Value">The scalar value to multiply the Matrix object</param>
            <returns>
            The multiplication of the scalar and the Matrix object as a 
            Matrix object
            </returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Multiply(System.Double,WiimoteLib.Matrix)">
            <summary>
            Returns the multiplication of a matrix or a vector (i.e 
            dimension [3,1]) with a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to multiply the Matrix object</param>
            <param name="Mat">Matrix object which is to be multiplied by a scalar</param>
            <returns>
            The multiplication of the scalar and the Matrix object as a 
            Matrix object
            </returns>
        </member>
        <member name="M:WiimoteLib.Matrix.ScalarDivide(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the array with</param>
            <param name="Mat">Array which is to be divided by a scalar</param>
            <returns>The division of the array and the scalar as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.ScalarDivide(System.Double,WiimoteLib.Matrix)">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the array with</param>
            <param name="Mat">Matrix which is to be divided by a scalar</param>
            <returns>The division of the array and the scalar as an array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Division(WiimoteLib.Matrix,System.Double)">
            <summary>
            Returns the division of a matrix or a vector (i.e 
            dimension [3,1]) by a scalar quantity.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Value">The scalar value to divide the Matrix object with</param>
            <param name="Mat">Matrix object which is to be divided by a scalar</param>
            <returns>
            The division of the Matrix object and the scalar as a Matrix object
            </returns>
        </member>
        <member name="M:WiimoteLib.Matrix.CrossProduct(System.Double[],System.Double[])">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3]) in the cross product</param>
            <param name="V2">Second vector array (dimension [3]) in the cross product</param>
            <returns>Cross product of V1 and V2 as an array (dimension [3])</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.CrossProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3x1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimensions [3,1]) in the cross product</param>
            <param name="V2">Second vector array (dimensions [3,1]) in the cross product</param>
            <returns>Cross product of V1 and V2 as an array (dimension [3,1])</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.CrossProduct(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the cross product of two vectors whose
            dimensions should be [3] or [3x1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First Matrix (dimensions [3,1]) in the cross product</param>
            <param name="V2">Second Matrix (dimensions [3,1]) in the cross product</param>
            <returns>Cross product of V1 and V2 as a matrix (dimension [3,1])</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.DotProduct(System.Double[],System.Double[])">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3]) in the dot product</param>
            <param name="V2">Second vector array (dimension [3]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.DotProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First vector array (dimension [3,1]) in the dot product</param>
            <param name="V2">Second vector array (dimension [3,1]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.DotProduct(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Returns the dot product of two vectors whose
            dimensions should be [3] or [3,1].
            In case of an error the error is raised as an exception.
            </summary>
            <param name="V1">First Matrix object (dimension [3,1]) in the dot product</param>
            <param name="V2">Second Matrix object (dimension [3,1]) in the dot product</param>
            <returns>Dot product of V1 and V2</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.VectorMagnitude(System.Double[])">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">The vector array (dimension [3]) whose magnitude is to be found</param>
            <returns>The magnitude of the vector array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.VectorMagnitude(System.Double[0:,0:])">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">The vector array (dimension [3,1]) whose magnitude is to be found</param>
            <returns>The magnitude of the vector array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.VectorMagnitude(WiimoteLib.Matrix)">
            <summary>
             Returns the magnitude of a vector whose dimension is [3] or [3,1].
             In case of an error the error is raised as an exception.
            </summary>
            <param name="V">Matrix object (dimension [3,1]) whose magnitude is to be found</param>
            <returns>The magnitude of the Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.IsEqual(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Checks if two Arrays of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First array in equality check</param>
            <param name="Mat2">Second array in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.IsEqual(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix in equality check</param>
            <param name="Mat2">Second Matrix in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Equality(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are equal or not.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in equality check</param>
            <param name="Mat2">Second Matrix object in equality check</param>
            <returns>If two matrices are equal or not</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.op_Inequality(WiimoteLib.Matrix,WiimoteLib.Matrix)">
            <summary>
            Checks if two matrices of equal dimensions are not equal.
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat1">First Matrix object in equality check</param>
            <param name="Mat2">Second Matrix object in equality check</param>
            <returns>If two matrices are not equal</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a MatrixLibrary.Matrix
            object and is identical to this MatrixLibrary.Matrix object.
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns>This method returns true if obj is the specified Matrix object identical to this Matrix object; otherwise, false.</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.PrintMat(System.Double[0:,0:])">
            <summary>
            Returns a matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">The array to be viewed</param>
            <returns>The string view of the array</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.PrintMat(WiimoteLib.Matrix)">
            <summary>
            Returns a matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <param name="Mat">The Matrix object to be viewed</param>
            <returns>The string view of the Matrix object</returns>
        </member>
        <member name="M:WiimoteLib.Matrix.ToString">
            <summary>
            Returns the matrix as a string, so it can be viewed
            in a multi-text textbox or in a richtextBox (preferred).
            In case of an error the error is raised as an exception.
            </summary>
            <returns>The string view of the Matrix object</returns>
        </member>
        <member name="P:WiimoteLib.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Set or get an element from the matrix
            </summary>
        </member>
        <member name="P:WiimoteLib.Matrix.NoRows">
            <summary>
            Set or get the no. of rows in the matrix.
            Warning: Setting this property will delete all of
            the elements of the matrix and set them to zero.
            </summary>
        </member>
        <member name="P:WiimoteLib.Matrix.NoCols">
            <summary>
            Set or get the no. of columns in the matrix.
            Warning: Setting this property will delete all of
            the elements of the matrix and set them to zero.
            </summary>
        </member>
        <member name="P:WiimoteLib.Matrix.toArray">
            <summary>
            This property returns the matrix as an array.
            </summary>
        </member>
        <member name="T:WiimoteLib.KalmanEulerFilter">
            <summary>
            Euler Extended Kalman Filter (EKF) Library for Wiimote + MotionPlus
            </summary>
        </member>
        <member name="M:WiimoteLib.KalmanEulerFilter.#ctor(System.Single)">
            <summary>
            Constructor.
            Q and R are how much you trust on data. High Q and low R trust more on reference data,
            low Q and high R trust more on gyros.
            P is initial covariance error. Should be big (~10).
            Q = 0.01, R=6, P = 10 are good starting values.
            </summary>
        </member>
        <member name="M:WiimoteLib.KalmanEulerFilter.Reset">
            <summary>
            Reset filter
            </summary>
        </member>
        <member name="M:WiimoteLib.KalmanEulerFilter.Predict(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Predict new state based on gyro inputs [rad/s] and last state.
            Calculate predictec covariance
            dt is elapsed time since lsat call in seconds.
            </summary>
        </member>
        <member name="M:WiimoteLib.KalmanEulerFilter.Estimate(System.Double,System.Double,System.Double)">
            <summary>
            Estimate new state based on external reference and prediction.
            Calculate Estimate covariance
            </summary>
        </member>
        <member name="M:WiimoteLib.KalmanEulerFilter.GetState(System.Double@,System.Double@,System.Double@)">
            <summary>
            Get state variables roll, pitch and yaw for state matrix.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WiimoteLib.KalmanEulerFilter.Update(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" -->
        <member name="M:WiimoteLib.KalmanEulerFilter.ParamPositionFilter(System.Double,System.Double,System.Double)">
            <summary>
            Ser another parameters do EKF filter
            </summary>
        </member>
        <member name="P:WiimoteLib.KalmanEulerFilter.SamplePeriod">
            <summary>
            Gets or sets the sample period.
            </summary>
        </member>
        <member name="P:WiimoteLib.KalmanEulerFilter.Qparam">
            <summary>
            Kalman filter parameter Q
            </summary>
        </member>
        <member name="P:WiimoteLib.KalmanEulerFilter.Rparam">
            <summary>
            Kalman filter parameter R
            </summary>
        </member>
        <member name="P:WiimoteLib.KalmanEulerFilter.Pparam">
            <summary>
            Kalman filter parameter P
            </summary>
        </member>
        <member name="T:WiimoteLib.GyroFilter">
            <summary>
            Implementation of Gyros filter
            </summary>
        </member>
        <member name="M:WiimoteLib.GyroFilter.#ctor(System.Int32)">
            <summary>
            Constructor for Gyro Filter.
            n is number of sampless used to average offset value.
            </summary>
        </member>
        <member name="M:WiimoteLib.GyroFilter.Reset">
            <summary>
            Reset filter. The next n samples will be used to calculate offset value
            </summary>
        </member>
        <member name="M:WiimoteLib.GyroFilter.removeOffset(System.Single@,System.Single@,System.Single@)">
            <summary>
            Calculate mean offset of n samles (using recursive math) and remove if from signal.
            gx, gy, gz are gyro input to be filtered. 
            </summary>
        </member>
        <member name="M:WiimoteLib.KalmanMotionPlusFuser.ResetFuser">
            <summary>
            Reset Filter
            </summary>
        </member>
    </members>
</doc>
